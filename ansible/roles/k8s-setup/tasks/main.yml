---
- name: Include docker role
  include_role:
    name: docker-setup

- name: Disable swap
  ansible.builtin.command: swapoff -a
  become: true

- name: Ensure net.bridge.bridge-nf-call-iptables is set to 1
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    state: present
    reload: yes

# Setup Containerd
- name: Install containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Generate and modify containerd config with SystemdCgroup enabled
  ansible.builtin.shell: |
    containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml
  become: true

- name: Ensure containerd is enabled and restarted
  systemd:
    name: containerd
    enabled: yes
    state: restarted

# Setup Kubernetes components
- name: Add Kubernetes repository GPG key
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ kube_minor_version }}/deb/Release.key |
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes apt repository source
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_minor_version }}/deb/ /"
    state: present
    filename: kubernetes

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
  become: true

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
  become: true

- name: Mark Kubernetes packages to hold
  ansible.builtin.command: apt-mark hold {{ item }}
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: true

- name: Initialize Kubernetes cluster
  ansible.builtin.shell: |
    kubeadm init \
      --apiserver-advertise-address={{ ansible_default_ipv4.address }} \
      --pod-network-cidr={{ calico_pod_cidr }} \
      --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  become: true

- name: Create .kube directory
  file:
    path: "/home/{{ kube_user }}/.kube"
    state: directory
    mode: '0700'
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"

- name: Copy Kubernetes admin.conf to .kube/config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ kube_user }}/.kube/config"
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"
    mode: '0644'
    remote_src: yes
  become: true

# # Setup Calico network plugin
- name: Create Tigera Operator (CRDs and operator deployment)
  ansible.builtin.command:
    cmd: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml
  register: tigera_operator
  changed_when: "'created' in tigera_operator.stdout"
  retries: 5
  delay: 5
  until: tigera_operator.rc == 0
  become_user: "{{ kube_user }}"

- name: Render Calico custom resources template
  ansible.builtin.template:
    src: calico-custom-resources.yaml.j2
    dest: /tmp/calico-custom-resources.yaml
    mode: '0644'

- name: Create Calico custom resources
  ansible.builtin.command:
    cmd: kubectl create -f /tmp/calico-custom-resources.yaml
  register: calico_crds
  changed_when: "'created' in calico_crds.stdout or 'configured' in calico_crds.stdout"
  retries: 5
  delay: 5
  until: calico_crds.rc == 0